Documentation of the Python webserver (and tests) for Project 1 of Computer Networks
By Jonathan Moerman (s4436555) and Jan Potma (s4476360)

We used the framework as given for our server, exclusively using Python 2.7.11.
No external libraries were used.

When the webserver receives a (number of) request(s), it goes to the serverthread, which handles it.
If the socket times out before a request is received the timeout is handled by server which throws a 408 error.
Otherwise, it goes through to the parser, which seperates it and parses it, after which it goes through to the composer.
The composer will handle persistence, and it also handles the remaining errors, 505 if it is the wrong HTTP version, 404 and 403 if errors arise retrieving the file, 304 if nothing has changed, and 406 if no encoding is supported.
ETags are generated through resource, as are gzips.
When the composer is done, the server will send out the response, and possibly close the connection.

Concurrency is done through the parser, which splits requests.
ETags are done using timestamps rather than hashing, which is much simpler.
For such a small server as this, it should be sufficient.
No collisions are expected as time advances.
Resource encoding is done by checking the encodings and using gzip when preferred - a gzipped version of the resource is then created.
As there is no way to check if the gzipped file matches the current file, this is generated again for every connection in a temp folder, however, due to ETags it will not be unnecessarily generated for the same connection.

Challenges:
We faced several minor technical challenges during this project (including permissions and OS differences), but we overcame them all.
Using git made sure we were up-to-date and it was clear where we were, and allowing us to work together when we hit trouble.
The biggest challenge was probably poor planning, which, to be fair, was mostly my (Jan) fault, but this was resolved in the end.